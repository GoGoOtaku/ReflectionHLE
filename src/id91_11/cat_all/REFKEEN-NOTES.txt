Preface
=======

This file, and related notes, intend to cover changes in behaviors and/or
code structures to involved program, in comparison to the original versions.

Please note that while the information given here might appear to be useful,
any subset of it might be wrong and/or outdated at any given time.
Regardless, it should still be a good way to show some of the
technical problems with mimicking the original behaviors
of a program, including vanilla bugs.

General changes
===============

- Disabling unused code and definitions.

- The occasional fix for an unaligned read/write,
as well as other modifications done for portability.

- Extended user input support mostly separate from the original code
(game controllers, multi-touch).

- There's currently no full emulation of EGA plane maintenance. Instead,
routines that output to the desired planes are used. Macros like EGAWRITEMODE
are no-ops.

- Changes that assist with building code originally written in C as C++,
or even just resolving what are technically undefined behaviors.
One example is a separate enum type being defined for the type
of c*_debug.c:viewtypeenum (used just in Catacomb 3D), and then
appropriately incrementing it in a cyclic manner within ViewMap.
Another one is fixing the definition of statetype's think/thinkptr field
to use the correct arguments list. It was also renamed from think to thinkptr
for consistency with Keen Dreams, where it was required due to a conflict
with the 'think' enum value.

- Direct accesses to the TimeCount variable were adjusted for the purpose
of getting a functional port. Originally, TimeCount was incremented
at a specific rate by a custom timer interrupt handler,
set up to be periodically called by the hardware.

- c3_scale.c:DeplanePic (all episodes): Code structure was somewhat
modified as a side-effect of porting from asm.

- c3_scale.c:BuildCompScale (all episodes): Code still exists for
preserving relevant memory contents, with the few required adjustments.

- c3_scale.c:ExecuteCompScale (all episodes): This is a replacement
for functions generated by BuildCompScale (using x86 machine mode).

- c3_scale.c:BuildCompShape (all episodes): Like BuildCompScale, the function
still exists, while being adapted for the purpose of porting. Writes to EGA
memory were adjusted as expected.

- c3_scale.c:ExecuteCompShape (all episodes): Like ExecuteCompScale,
this is a replacement for functions generated by BuildCompShape.

- c3_scale.c:ScaleShape (all episodes): The function was adapted, using
ExecuteCompShape where it's expected to. The macro MAXSCALE is used for
all episodes, instead of MAX_OBJ_SCALE for the Adventure Series.

- c3_main.c (Catacomb 3D): The jabhack code is not used in any form.

- gelib.c:ID (Catacomb Abyss): Due to support for more than one version,
along with GAMENAME depending on the game version, the length of the ID
char array was appropriately chosen. A size check was added
to RefKeen_Patch_gelib, just in case.

Bug fixes with no practical impacts on behaviors
================================================

c3_scale.c:BuildCompShape (all episodes): A couple of while loops with
boolean and expressions had the order the operands re-ordered, in order
to prevent buffer overrun. Loop execution should stop when y < 64 with
the original EXEs, so there shouldn't be an impact on behaviors.

c3_game.c:levelnames (Catacomb 3D): When using the debug keys F10+E in the
very last map, DrawEnterScreen is called with the index of what would be
the following map. However, originally, this was leading to a buffer overflow
with access to levelnames. So, an empty string was added for emulating the
behaviors, as present in versions 1.00 and 1.22 of the game.

gelib.c:PrintPropText (Catacomb Abyss): Like a few ID_US functions,
say US_Print, it was adapted to work with a const char buffer input,
making it usable with C string literals.

c5_act2.c:T_HarmlessBunnyWalk (Catacomb Arm): Originally, there
may be an overflow with read of valid_dir[player_dir][2] when
player_dir == (dirtype)7. An earlier inspection revealed that it was
just the boolean value of gelib.c:InLoadSaveGame (at least in v1.02),
which was always set to false. So, valid_dir was appropriately increased.

slidecat.c:slidecat_TrashProg: It is first checked that OutMsg is non-null
before doing the same with *OutMsg.

Bugs fixes which might have impacts on behaviors
================================================

- c3_asm.c:ScaleWalls (all episodes): wallseg[colNum] might be a null seg
pointer in the original EXEs. We kinda emulate the behaviors that follow
by replacing it with g_be_cross_dosZeroSeg in such a case.
Exact behaviors (in that case, outputted EGA data) depend on the environment
(in which the original EXE is run).

- c3_trace.c:FollowWalls (all episodes): Originally, one of the elements of
tilemap was inspected before checking that the indices were in the valid range.
This could lead to overflows if any of the indices was negative, with an
example of a specific location written in a comment within the ported code.
It is now checked that the indices are nonnegative, something which might
impact the behaviors in case the branch would originally be taken.

- c*_draw.c:BuildTables (all episodes): The original code, not using the
pre-calculated sintable, technically have a buffer overflow when writing
to sintable[i+ANGLE] with i == ANGLEQUAD. This write is currently skipped
in the port.
For the Catacomb Abyss versions 1.13 and 1.24, this was confirmed
to effectively lead to a write of the updated value of
sintable[ANGLEQUAD] & 0xff to lastnuke.
f
- c*_draw.c:DrawScaleds (all episodes): A buffer overflow fix,
checking obj->tiles and obj->tiley before reading from visspot.
Based on a written comment, this was reproduced from obj->tiley being set
to a quite large value, like 65534, due to a right-shift of obj->y, with
the signed value of -95792, by 16 bits.

- c4_game.c:DrawEnterScreen (Catacomb Abyss): While the game, at least in
versions 1.13 and 1.24, lets you warp to level 19, this would lead to an
overflow in access to levelnames. So, the port now emulates the behaviors
to a limited extend. If it's found that the referenced string was originally
beginning at one of the elements of grsegs, and it was set to zero,
then the behaviors are as if the level name was an empty string.
Otherwise, the game is aborted with a new error message.

gelib.c:GE_SaveGame (Catacomb Adv): Add missed closes of file handle.

gelib.c:BLoad (Catacomb Abyss), ext_soft.c:ext_BLoad:
Add missed closes of file handle before calls to CA_LoadFile/LoadFile.

- c*_main.c:LoadTheGame (Catacomb Adv): The FindFile/FindRewritableFile check
was disabled, as the file was already opened, and this
can lead to unexpected behaviors.

- c*_wiz.c:ClipXMove, ClipYMove (Catacomb Adv): Originally,
TouchActor(ob, check) could be called even if check, as an unsigned int,
were <= LASTTILE i.e., it wasn't an object pointer. TouchActor is now
not called in such a case.

- c6_act2.c:T_Head (Catacomb Apoc): With the function being used for
the Time Lords, originally, the angle variable was not initialized.
Yet, it could be compared to -1 before conditionally calling ShootPlayer.
It is now assumed in the port that angle is always set to 0,
or at least, that it differs from -1.

- c*_act3.c:T_ShootPlayer (Catacomb Arm/Apoc): After converting an "actorat"
value to an object pointer and writing it to "check", there was the risk that
it would be processed as an object even though it was actually a tile.
A verification that the tile number is > LASTTILE was thus added.

- Generally speaking, when pointers get converted from the valued used
in the original executables, 0 may be used as a fallback in case of an
unidentified input. For Catacomb Armageddon/Apocalypse, this may impact
the sky color, especially if a cheat is used which is impacting it.

- ext_vw_a.c:SetScreen: The call to VW_WaitVBL may lead to different
behaviors. Also, calling it before BE_ST_EGASetPelPanning, which would be
closer to the original code in structure, was found to lead to horizontal
scrolling glitches in the Keen Dreams port.

- slidecat.c main function: A bug fix, freeing script_file_start instead
of script_file_ptr after updating the latter.

- slidecat.c:CheckParm: The while loop first checks if *parm is non-null.

Misc. technical changes from the original
=========================================

c*_game.c:GameLoop (all episodes): Simulation of a short wait
while loading, done by an additional call to VW_WaitVBL.

c3_main.c:InitGame (Catacomb 3D): introscn's storage
isn't used by MML_UseSpace.

c*_main.c:TEDDeath (all episodes): Now exiting with a descriptive
textual message instead of attempting to transfer control to TED5.EXE.

c*_play.c:PlayLoop (all episodes): Originally, the games had no frame rate
locking at all. In order to reduce CPU usage while generally
not reducing the amount of distinct rendered frames,
a short wait of a single game tick was added.

gelib.c:GE_SaveGame (Catacomb Adv): Disk space check was removed.

gelib.c:GE_SaveGame, GE_LoadGame (Catacomb Adv): A bit of refactoring,
moving the EXIT_FUNC label down, and not used it at all after opening file.

gelib.c:FizzleFade (Catacomb Adv): A small bit of time delay was added.

c*_main.c/intro.c main functions, slidecat.c:slidecat_TrashProg (Catacomb Adv):
Originally, it was expected to get the char sequence ^(a@&r`
as the first parameter. This role was reversed.

ext_gelib.c: No support for printing.

General notes about external programs: Duplicated functions might be unused
if there are already full equivalents from the game side.
This had a side-effect on ext_gelib.c:TrashProg, ext_jam_io.c:ReadPtr and
ext_soft.c:ext_BLoad (renamed BLoad function), having to check which program
is being "run". Reason is that what used to be separate EXEs may now run
from a single program.

intro.c:intro_exe_main_reverter and slidecat.c:slidecat_exe_main_reverter
were added for reverting changes, so the flow may continue from code
representing one exe to the code of another exe, and back.
For instance, you can show the intro, then select the slides,
and then return to the intro and repeat.

intro.c/loadscn.c main function: Added an artificial delay.

slidecat.c:slidecat_TrashProg: Instead of calling START.EXE,
an exit with descriptible message is done.

Purposed instances of vanilla bug emulation
===========================================

c*_game.c:DrawPlayScreen (Catacomb Abyss/Arm): Originally, the last call
to VW_DrawPic leaves the map mask value at 8 (intensity plane), so numbers
aren't drawn in the call to RedrawStatusWindow. As values related to
EGA write/read mode aren't internally stored in the port, a workaround
was added. It generally isn't needed.
note that this isn't required for Catacomb Apocalypse,
due to RedrawStatusWindow not being called.

c*_wiz.c:DrawChar (Catacomb Abyss/Arm): In conjunction with DrawPlayScreen,
digits aren't drawn during level load.
As described eariler, this isn't needed for Catacomb Apocalypse.

Changes for compatibility
=========================

- The statetype struct has an additional field for the original values
of pointers to such states in the DOS versions, for the purpose of
compatibility with original saved games. Note that originally, the states were
moved from near memory to far memory in Catacomb Armageddon and Apocalypse.
As a side-effect, pointers to them were changed from 16-bit near pointers to
32-bit far pointers, but the segments are written to saved files in a way which
doesn't depend on the exact location of the code's first segment. Thus,
compatibility is only partial, as it originally didn't exist.

- Pointers to objects may be converted for compatibility.

- The actorat array is now exclusively using a 16-bit unsigned int as the
underlying type, instead of what used to be 16-bit near pointers. Pointers to
objects are converted before writing them to actorat in a compatible manner.

- A pre-calculated sintable array is defined for the 3D Catacombs and
Wolfenstein 3D, while the calculations in c*_draw.c:BuildTables were disabled.
Reason is that the exact calculated values could depend on factors like
floating point precisions and/or the implementation of the function "sin".
In particular, sintable[90] was originally set to 0xFFFF. Before using the
pre-calculated table in the ports, it could actually be set to 0x10000 instead,
leading to unexpected bugs impacting rendering and gameplay altogether, at
least while looking with the right viewing angle.
