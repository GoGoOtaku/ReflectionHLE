Preface
=======

This file, and related notes, intend to cover changes in behaviors and/or
code structures to involved program, in comparison to the original versions.

Please note that while the information given here might appear to be useful,
any subset of it might be wrong and/or outdated at any given time.
Regardless, it should still be a good way to show some of the
technical problems with mimicking the original behaviors
of a program, including vanilla bugs.

General changes
===============

- Disabling unused code and definitions.

- The occasional fix for an unaligned read/write,
as well as other modifications done for portability.

- Extended user input support mostly separate from the original code
(game controllers, multi-touch).

- There's currently no full emulation of VGA plane maintenance. Instead,
routines that output to the desired planes are used. Macros like VGAWRITEMODE
are no-ops. As a side-effect, whack_a.c:MapRow was changed to accept the plane
number. Additionally, id_vl.c:VL_DePlaneVGA just calls VL_ClearVideo now.

- Changes that assist with building code originally written in C as C++,
or even just resolving what are technically undefined behaviors.
One example is wl_menu.c:ScanNames, changing the strings to use char instead
of byte, so we may define it with char literals without using separate casts.
Another one is fixing the definition of statetype's think/thinkptr field
to use the correct arguments list. It was also renamed from think to thinkptr
for consistency with Keen Dreams, where it was required due to a conflict
with the 'think' enum value.

- Modifications for support of multiple versions.

- The UPLOAD macro was replaced with an equivalent variable.

- id_mm.c and id_pm.c were both adjusted for the purpose of porting to
modern platforms, while still trying to not change too much of the code.

- id_sd* and more: Direct accesses to the TimeCount variable were adjusted
for the purpose of getting a functional port. Originally, TimeCount was
incremented at a specific rate by a custom timer interrupt handler,
set up to be periodically called by the hardware.

- While porting id_sd_a.asm to C, a previously unused subset of
id_sd.c was used again. A subset of the code had to be patched
in order to behave at least a bit more like the assembly code,
using the macro REFKEEN_ENABLE_AND_PATCH_ID_SD_SERVICES.

- id_sd.c: OPL delays are done via the separate game-agnostic code.
As of writing this, they only impact the sound output, not in-game timing.
There's also no such delay for digitized output (SB replacement).

- id_sd.c:SDL_DetectAdLib: It simply checks if OPL emulation is needed
and enabled now.

- id_sd.c:SD_Shutdown: BE_ST_StopAudioAndTimerInt is called earlier,
just to make sure there's no deadlock while audio is "locked".

- id_vl_a.c:VL_SetCRTC: No separate delay is done.

- id_vl_a.c:VL_SetScreen: The way the delay is done might differ.

- Changes were technically done to wl_dr_a.asm while porting to C.

- wl_inter.c: There are possible problems with timing related to BJ_Breathe.

- wl_main.c:SaveTheGame: Disk space check was disabled.

- wl_main.c:InitGame: Storage of signon (introscn) isn't used by MML_UseSpace.

- wl_main.c:DoJukebox: The exact manner in which the current time
is used for calculating "start" is expected to differ.

- wl_scale.c:BuildCompScale: Code still exists for preserving
relevant memory contents, with the few required adjustments.

- wl_scale.c:ExecuteCompScale: This is a replacement for functions
generated by BuildCompScale (using x86 machine mode).

Bug fixes with no practical impacts on behaviors
================================================

- id_ca.c:GRFILEPOS would originally read 4 bytes from a buffer beginning
at grstarts. However, grstarts represents an array of 3 bytes long integers.
Just in case of a possible overflow, this was replaced with a copy of 3 bytes.

- id_sd.c:SDL_PCService: Originally, there could be an overflow by trying to
read from pcSoundLookup[255], due to a bug reproduced while playing digitized
sounds via the PC Speaker. For all versions of Wolf3D/SOD/S3DNA checked
as of writing this, pcSoundLookup[255] overflows into pcLengthLeft's
low 16-bit word. This is now emulated.

- id_us.c:US_(C)Print: Modified to accept a string via a pointer to const,
while not temporarily modifying it.

- id_us.c:US_CPrintLine: Like US_Print, using an additional parameter.

- id_vh.c:VWL_MeasureString, VW_DrawPropString:
Like US_Print, using an additional parameter.

- wl_agent.c:DrawFace: LastAttacker->obclass could be read while LastAttacker
is a null pointer, especially in v1.0 upon getting hit by a dog.
The original behaviors are now emulated.

- wl_game.c:Died: killerobj->x,y may be dereferenced even if killerobj is NULL.
This may occur upon entering the game without actually getting hit by any
killer, or alternatively, after getting killed by a dog in Wolf3D v1.0,
with the latter occurring due to an unrelated bug in wl_act2.c:T_Bite.
Emulation of null pointer dereferences was added.

- wl_main.c:SaveTheGame, LoadTheGame: nullobj is initialized, so there's no
use of uninitialized data.

- wl_main.c:Quit: *error could be referenced even if error were a null pointer
(which is actual the usual case). It is now checked that error is non-null.
In practice, the behaviors should still be the same as they originally were.

- wl_main.c:Quit: For the March 1992 alpha, now exiting with a descriptive
textual message instead of attempting to transfer control to TED5.EXE.

- wl_menu.c:MainMenu: Within the original GOODTIMES and SPEAR DOS exes,
a buffer overflow past the MainMenu array's end would be possible,
at least with active and string[0] being set to 0;
Reason being that MainItems.amount was not reduced from 10.
This is now emulated by an addition of zeros and an empty string to the array.

- wl_menu.c:SndMenu: Same as the MainMenu overflow,
just with SndItems.amount not being reduced from 12.

Bugs fixes which might have impacts on behaviors
================================================

- id_sd.c:SD_SetSoundMode: result is now always initialized, even for the
March 1992 version. Previously, it could be accessed while uninitialized
if SD_SetSoundMode was called with sdm_AdLib, but AdLibPresent was false.

- id_sd.c:SD_SetSoundMode: tableoffset is set to 0 if called with sdm_Off.
Unlike earlier games, where this would have no impact due to SD_PlaySound
checking if SoundMode is sdm_Off before reading SoundTable, there may still
be an impact in Wolf3D if SoundMode == sdm_Off but DigiMode != sds_Off.
In practice, the value of s->priority would depend on the environment.
For now, as written above, the code was changed to set tableoffset to 0
in case of getting sdm_Off.

- id_sd.c:SD_SetMusicMode: result is now always initialized, even for the
March 1992 version. Previously, if could be accessed while uninitialized
if SD_SetMusicMode was called with smm_AdLib, but AdLibPresent was false.

- id_sd.c:SD_PlaySound: In case SoundMode == sdm_Off but DigiMode != sds_Off,
the value of s i.e., SoundTable[sound], and thus of s->priority, could be
technically undefined. One case is where SoundTable is not yet set. The other
would be after SD_SetSoundMode setting SoundTable to &audiosegs[tableoffset],
where tableoffset is (at least originally) uninitialized. The latter
was separately covered in SD_SetSoundMode. As for SD_PlaySound itself,
it was changed to assign 0 to s in case SoundTable is null, and after
a sound caching check, it overwrites s with audiosegs[0].

- id_us_1.c: ParmStrings and ParmStrings2 were originally not null-terminated,
leading to possible overflows in calls to US_CheckParm. They were
null-terminated in the port.

- id_us_1.c:US_CheckParm: The while loop first checks if *parm is non-null.

- id_vw.c:LoadLatchMem: For Wolf3D versions preceding shareware v1.1,
a loop over 16x16 tiles may try to read data from a null pointer at
grsegs[STARTTILE16+i]. It is replaced with g_be_cross_dosZeroSeg
in the port.

- wl_act1.c: OperateDoor can mistakenly be called with an out-of-range
door number, after pressing on a pushwall while it's being pushed.
With the original exes, this can lead to buffer overflows in attempts to
read from doorobjlist. The relevant behaviors are now emulated, to an extent.
Certain values might be imperfectly converted, say a visspot pointer.

- wl_act2.c: Early versions of Spawn* functions were mistakenly defined with
a 'dir' param, although it wasn't actually filled on function call. Thus,
it was technically undefined. A value of nodir is now assumed instead, while
the function doesn't accept such a parameter, regardless of game version.
Covered functions: SpawnBoss, SpawnGretel, SpawnSchabbs, SpawnGift,
SpawnFat, SpawnFakeHitler, SpawnHitler.

- wl_act2.c, wl_state.c: Calls to TakeDamage from T_Ghosts/T_Bite/MoveObj were
mistakenly done while not passing the obj pointer in early versions of Wolf3D.
These calls were changed to pass null instead. This would mimic common
behaviors upon getting killed by the dog in Wolf3D v1.0.

- wl_game.c:SetupGameLevel: In case mapheaderseg[gamestate.mapon] is a null
pointer (probably due to the lack of a map), don't call CA_CacheMap, and
imply show an error that the map isn't 64*64. Due to the layouts of the
original EXEs, unless CA_CacheMap failed due to e.g., an unexpectedly
large "expand" value, these would actually be the observed behaviors.

- When wl_menu.c:SetupControlPanel reads a saved game name itself, it
originally didn't null-terminate the string. strcpy could mistakenly
be called with such a string, leading to technically undefined behaviors.
For no, the string is explicitly null-terminated in the port.

Misc. technical changes from the original
=========================================

- id_ca.c:CAL_HuffExpand behaves a bit different when screenhack == true.
Originally, dest was MK_FP(SCREENSEG,bufferofs), where SCREENSEG is 0xa000.
Now, though, this parameter is ignored, and special handling is present
for expanding into the equivalent of VGA memory.

Purposed instances of vanilla bug emulation
===========================================

id_sd.c:MIDI_DoEvent (S3DNA): If event == 0x51, then there could be a 16-bit
integer overflow in one of the calculations. This was leading to the wrong
tempo values. While not reproduced for targets where an int has 32 bits
or more, this is explicitly emulated now.

Changes for compatibility
=========================

- The statetype struct has an additional field for the original values
of pointers to such states in the DOS versions, for the purpose of
compatibility with original saved games.

- Pointers to objects may be converted for compatibility.

- The same was done for the visspot field of statobj_t.

- The actorat array is now exclusively using a 16-bit unsigned int as the
underlying type, instead of what used to be 16-bit near pointers. Pointers to
objects are converted before writing them to actorat in a compatible manner.

- A pre-calculated sintable array is defined for the 3D Catacombs and
Wolfenstein 3D, while the calculations in wl_main.c:BuildTables were disabled.
Reason is that the exact calculated values could depend on factors like
floating point precisions and/or the implementation of the function "sin".
In particular, sintable[90] was originally set to 0xFFFF. Before using the
pre-calculated table in the ports, it could actually be set to 0x10000 instead,
leading to unexpected bugs impacting rendering and gameplay altogether, at
least while looking with the right viewing angle.

- wl_main.c: In addition to handling the offsets of objects, additional code
was added for properly calculating the checksums for saved games.
